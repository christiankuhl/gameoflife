
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEleftEXPrightUMINUSNAME NUMBER PLUS MINUS EXP TIMES DIVIDE EQUALS LPAREN RPAREN PARAM KEY STRINGstatement : PARAM expressionstatement : KEY expressionstatement : KEYstatement : NAME EQUALS expressionstatement : expression\n        expression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression EXP expression\n        expression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAMEexpression : STRING'
    
_lr_action_items = {'PLUS':([1,5,6,7,10,11,12,13,20,21,22,23,24,25,26,27,],[-15,-13,-14,15,-11,-14,15,15,15,-12,15,-6,-7,-8,-9,-10,]),'TIMES':([1,5,6,7,10,11,12,13,20,21,22,23,24,25,26,27,],[-15,-13,-14,17,-11,-14,17,17,17,-12,17,17,17,-8,-9,-10,]),'STRING':([0,2,3,4,8,14,15,16,17,18,19,],[1,1,1,1,1,1,1,1,1,1,1,]),'LPAREN':([0,2,3,4,8,14,15,16,17,18,19,],[4,4,4,4,4,4,4,4,4,4,4,]),'PARAM':([0,],[3,]),'NUMBER':([0,2,3,4,8,14,15,16,17,18,19,],[5,5,5,5,5,5,5,5,5,5,5,]),'EQUALS':([6,],[14,]),'NAME':([0,2,3,4,8,14,15,16,17,18,19,],[6,11,11,11,11,11,11,11,11,11,11,]),'$end':([1,5,6,7,8,9,10,11,12,20,21,22,23,24,25,26,27,],[-15,-13,-14,-5,-3,0,-11,-14,-1,-2,-12,-4,-6,-7,-8,-9,-10,]),'KEY':([0,],[8,]),'RPAREN':([1,5,10,11,13,21,23,24,25,26,27,],[-15,-13,-11,-14,21,-12,-6,-7,-8,-9,-10,]),'DIVIDE':([1,5,6,7,10,11,12,13,20,21,22,23,24,25,26,27,],[-15,-13,-14,18,-11,-14,18,18,18,-12,18,18,18,-8,-9,-10,]),'EXP':([1,5,6,7,10,11,12,13,20,21,22,23,24,25,26,27,],[-15,-13,-14,19,-11,-14,19,19,19,-12,19,19,19,19,19,-10,]),'MINUS':([0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,],[2,-15,2,2,2,-13,-14,16,2,-11,-14,16,16,2,2,2,2,2,2,16,-12,16,-6,-7,-8,-9,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,3,4,8,14,15,16,17,18,19,],[7,10,12,13,20,22,23,24,25,26,27,]),'statement':([0,],[9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> PARAM expression','statement',2,'p_statement_setparam','parser.py',82),
  ('statement -> KEY expression','statement',2,'p_statement_keyword_arg','parser.py',89),
  ('statement -> KEY','statement',1,'p_statement_keyword_noarg','parser.py',96),
  ('statement -> NAME EQUALS expression','statement',3,'p_statement_assign','parser.py',103),
  ('statement -> expression','statement',1,'p_statement_expr','parser.py',107),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',112),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',113),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',114),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',115),
  ('expression -> expression EXP expression','expression',3,'p_expression_binop','parser.py',116),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',130),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',134),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',138),
  ('expression -> NAME','expression',1,'p_expression_name','parser.py',142),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',150),
]
