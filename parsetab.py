
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEleftEXPrightUMINUSNAME NUMBER PLUS MINUS EXP TIMES DIVIDE EQUALS LPAREN RPAREN PARAM KEY STRINGstatement : PARAM expressionstatement : KEY expressionstatement : KEYstatement : NAME EQUALS expressionstatement : expression\n        expression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression EXP expression\n        expression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAMEexpression : STRING'
    
_lr_action_items = {'$end':([1,3,5,7,8,9,10,11,13,14,21,22,23,24,25,26,27,],[-15,0,-3,-13,-5,-14,-14,-1,-2,-11,-12,-8,-10,-9,-7,-6,-4,]),'EXP':([1,7,8,9,10,11,12,13,14,21,22,23,24,25,26,27,],[-15,-13,16,-14,-14,16,16,16,-11,-12,16,-10,16,16,16,16,]),'STRING':([0,2,4,5,6,15,16,17,18,19,20,],[1,1,1,1,1,1,1,1,1,1,1,]),'PARAM':([0,],[2,]),'EQUALS':([9,],[20,]),'LPAREN':([0,2,4,5,6,15,16,17,18,19,20,],[4,4,4,4,4,4,4,4,4,4,4,]),'PLUS':([1,7,8,9,10,11,12,13,14,21,22,23,24,25,26,27,],[-15,-13,19,-14,-14,19,19,19,-11,-12,-8,-10,-9,-7,-6,19,]),'TIMES':([1,7,8,9,10,11,12,13,14,21,22,23,24,25,26,27,],[-15,-13,15,-14,-14,15,15,15,-11,-12,-8,-10,-9,15,15,15,]),'KEY':([0,],[5,]),'DIVIDE':([1,7,8,9,10,11,12,13,14,21,22,23,24,25,26,27,],[-15,-13,17,-14,-14,17,17,17,-11,-12,-8,-10,-9,17,17,17,]),'MINUS':([0,1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,],[6,-15,6,6,6,6,-13,18,-14,-14,18,18,18,-11,6,6,6,6,6,6,-12,-8,-10,-9,-7,-6,18,]),'NUMBER':([0,2,4,5,6,15,16,17,18,19,20,],[7,7,7,7,7,7,7,7,7,7,7,]),'RPAREN':([1,7,10,12,14,21,22,23,24,25,26,],[-15,-13,-14,21,-11,-12,-8,-10,-9,-7,-6,]),'NAME':([0,2,4,5,6,15,16,17,18,19,20,],[9,10,10,10,10,10,10,10,10,10,10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,4,5,6,15,16,17,18,19,20,],[8,11,12,13,14,22,23,24,25,26,27,]),'statement':([0,],[3,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> PARAM expression','statement',2,'p_statement_setparam','parser.py',88),
  ('statement -> KEY expression','statement',2,'p_statement_keyword_arg','parser.py',95),
  ('statement -> KEY','statement',1,'p_statement_keyword_noarg','parser.py',102),
  ('statement -> NAME EQUALS expression','statement',3,'p_statement_assign','parser.py',109),
  ('statement -> expression','statement',1,'p_statement_expr','parser.py',113),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',119),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',120),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',121),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',122),
  ('expression -> expression EXP expression','expression',3,'p_expression_binop','parser.py',123),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',138),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',142),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',146),
  ('expression -> NAME','expression',1,'p_expression_name','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',158),
]
